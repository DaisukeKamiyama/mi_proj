/*Copyright (C) 2018  Daisuke Kamiyama (https://www.mimikaki.net)This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <https://www.gnu.org/licenses/>.*//*AppleScript*/#pragma once#include "../../AbsFramework/Frame.h"//#1034 #include "../../AbsFramework/MacAppleEvent/PowerPlant/LModelObject.h"//#1034 #include "../../AbsFramework/MacAppleEvent/PowerPlant/LModelDirector.h"#include "ATextInfo.h"//Object codeconst NSUInteger	kASObjectCode_Window = 'cwin';const NSUInteger	kASObjectCode_Document = 'docu';const NSUInteger	kASObjectCode_Paragraph = 'cpar';const NSUInteger	kASObjectCode_Word = 'cwor';const NSUInteger	kASObjectCode_Character = 'cha ';const NSUInteger	kASObjectCode_InsertionPoint = 'cins';const NSUInteger	kASObjectCode_SelectionObject = 'csel';const NSUInteger	kASObjectCode_IndexWindow = 'idxw';const NSUInteger	kASObjectCode_IndexGroup = 'idxg';const NSUInteger	kASObjectCode_IndexRecord = 'idxr';//enum {	cIndexWindow	= 'idxw',	cIndexRecord	= 'idxr',	cIndexGroup		= 'idxg',	pModified = 'imod',	pMode	= 'pmod',	pFileF	= 'file',	pStartPositionF	= 'spos',	pEndPositionF	= 'epos',	pCommentF	= 'comm',	pLineNumber = 'cpar',	pCreator = 'pfcr',	pType = 'pftp',	pCharacterCode = 'pchc',	pReturnCode = 'prtc',	pFileWidth = 'fwid',	pInfoWidth = 'iwid',	pFileOrder = 'ford',	pInfoOrder = 'iord',	pPathType = 'path',	pWindowIndex = 'pwin',	pHeader = 'head',	pIdleHookTime = 'idle',	pAskSaving = 'asks',	pFolderP = 'fold',	pWindowPosition = 'ppos',	pContent = 'pcnt',};#pragma mark ===========================#pragma mark [クラス]NSAppleEventDescriptor (MIScripting)#pragma mark ===========================//NSAppleEventDescriptorの拡張@interface NSAppleEventDescriptor (MIScripting)+(NSAppleEventDescriptor*)descriptorWithURL:(NSURL*)url;-(NSURL*)urlValue;+ (NSAppleEventDescriptor *)descriptorWithARect:(ARect)arect;- (ARect)arectValue;@end#pragma mark ===========================#pragma mark [クラス]LazyObjectsArray#pragma mark ===========================//LazyObjectを格納するリストのクラス//同じコマンドを実行中はLazyObjectを保持し、別のコマンドになったら保持していたLazyObjectをreleaseする。@class LazyObjectsArray;@interface LazyObjectsArrayItem: NSObject{	LazyObjectsArray*			mContainerArray;}- (void)setContainerArray:(LazyObjectsArray*)containerArray;- (NSInteger)indexInContainerArray;- (LazyObjectsArray*)containerArray;@end#pragma mark ===========================#pragma mark [クラス]LazyObjectsArrayItem#pragma mark ===========================//LazyObjectの基底クラス@interface LazyObjectsArray : NSObject{	NSObject*					mOwnerObject;	NSScriptCommand*			mCurrentCommand;	NSMutableArray*				mNSMutableArray;}- (id)init:(NSObject*)ownerObject;- (NSMutableArray*)array;- (NSInteger)registerLazyObject:(LazyObjectsArrayItem*)lazyObject;@end#pragma mark ===========================#pragma mark [クラス]MIScriptCommand#pragma mark ===========================@interface MIScriptCommand: NSScriptCommand@end@interface MIGetCommand : MIScriptCommand@end@interface MISetCommand : MIScriptCommand@end@interface MIQuitCommand : MIScriptCommand@end@interface MICreateCommand : MIScriptCommand@end@interface MIOpenCommand : MIScriptCommand@end@interface MICountCommand : MIScriptCommand@end@interface MIExistsCommand : MIScriptCommand@end@interface MIDeleteCommand : MIScriptCommand@end@interface MISelectCommand : MIScriptCommand@end@interface MISaveCommand : MIScriptCommand@end@interface MICloseCommand : MIScriptCommand@end@interface MICollapseCommand : MIScriptCommand@end@interface MIExpandCommand : MIScriptCommand@end#if 0#pragma mark ===========================#pragma mark [クラス]CASApp//AppleScriptハンドル用class CASApp : public PowerPlant::LModelObject{	//コンストラクタ／デストラクタ  public:	CASApp();	~CASApp();	  public:	void	HandleAppleEvent( const AppleEvent &inAppleEvent, AppleEvent &outAEReply, AEDesc &outResult, long inAENumber);	LModelObject*	HandleCreateElementEvent( 			DescType			inElemClass,			DescType			inInsertPosition,			LModelObject*		inTargetObject,			const AppleEvent	&inAppleEvent,			AppleEvent			&outAEReply);	SInt32	CountSubModels( DescType inModelID ) const;	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	void	GetSubModelByName( DescType inModelID, Str255 inName, AEDesc &outToken ) const;	SInt32	GetPositionOfSubModel( DescType inModelID, const LModelObject* inSubModel) const;	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);	void	MakeSelfSpecifier(			AEDesc&		inSuperSpecifier,			AEDesc&		outSelfSpecifier) const;};#pragma mark ===========================#pragma mark [クラス]CASWin//AppleScriptハンドル用class CASWin : public PowerPlant::LModelObject{	//コンストラクタ／デストラクタ  public:	CASWin( const CASApp* inApp, const AWindowID inWindowID );	~CASWin();  private:	AWindowID					mWindowID;	  public:	void	HandleAppleEvent( const AppleEvent &inAppleEvent, AppleEvent &outAEReply, AEDesc &outResult, long inAENumber);	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);	static void	SetWindowOrder( const AWindowID inWindowID, const ANumber inNumber );};#pragma mark ===========================#pragma mark [クラス]CASTextDoc//AppleScriptハンドル用class CASTextDoc : public PowerPlant::LModelObject{	//コンストラクタ／デストラクタ  public:	CASTextDoc( CASApp* inApp, const ADocumentID inDocumentID );	~CASTextDoc();  private:	ADocumentID					mDocumentID;	  public:	void	HandleAppleEvent( const AppleEvent &inAppleEvent, AppleEvent &outAEReply, AEDesc &outResult, long inAENumber);	LModelObject*	HandleCreateElementEvent( 			DescType			inElemClass,			DescType			inInsertPosition,			LModelObject*		inTargetObject,			const AppleEvent	&inAppleEvent,			AppleEvent			&outAEReply);	SInt32	CountSubModels( DescType inModelID ) const;	void	GetSubModelByName( DescType inModelID, Str255 inName, AEDesc &outToken ) const;	SInt32	GetPositionOfSubModel( DescType	inModelID, const LModelObject *inSubModel) const;	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);	void	MakeSelfSpecifier(			AEDesc	&inSuperSpecifier,			AEDesc	&outSelfSpecifier) const;  private:	SInt32	GetDocumentIndex() const;};#pragma mark ===========================#pragma mark [クラス]CASTextDocElement//AppleScriptハンドル用class CASTextDocElement : public PowerPlant::LModelObject{	//コンストラクタ／デストラクタ  public:	CASTextDocElement( const LModelObject* inSuper, DescType inKind, const ADocumentID inDocumentID, 			const ATextIndex inStartPos, const ATextIndex inEndPos );	virtual ~CASTextDocElement();  protected:	ADocumentID					mDocumentID;	ATextIndex					mStartPos;	ATextIndex					mEndPos;	  public:	ATextIndex			GetStartPos() const { return mStartPos; }	ATextIndex			GetEndPos() const { return mEndPos; }	  public:	void	HandleAppleEvent( const AppleEvent &inAppleEvent, AppleEvent &outAEReply, AEDesc &outResult, long inAENumber);	SInt32	GetPositionOfSubModel( DescType	inModelID, const LModelObject *inSubModel) const;	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	void	GetSubModelByName(		DescType		inModelID,		Str255			inName,		AEDesc			&outToken) const;	void	HandleDelete( AppleEvent &outAEReply, AEDesc &outResult );			LModelObject*	GetInsertionContainer(DescType inInsertPosition) const;};#pragma mark ===========================#pragma mark [クラス]CASParagraph//AppleScriptハンドル用class CASParagraph : public CASTextDocElement{	//コンストラクタ／デストラクタ  public:	CASParagraph( const LModelObject* inSuper, const ADocumentID inDocumentID, const ATextIndex inStartPos, const ATextIndex inEndPos );	~CASParagraph();	  public:	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	SInt32	CountSubModels( DescType inModelID) const;	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;};#pragma mark ===========================#pragma mark [クラス]CASWord//AppleScriptハンドル用class CASWord : public CASTextDocElement{	//コンストラクタ／デストラクタ  public:	CASWord( const LModelObject* inSuper, const ADocumentID inDocumentID, const ATextIndex inStartPos, const ATextIndex inEndPos );	~CASWord();	  public:	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	SInt32	CountSubModels( DescType inModelID) const;	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	void	HandleDelete( AppleEvent &outAEReply, AEDesc &outResult );};#pragma mark ===========================#pragma mark [クラス]CASChar//AppleScriptハンドル用class CASChar : public CASTextDocElement{	//コンストラクタ／デストラクタ  public:	CASChar( const LModelObject* inSuper, const ADocumentID inDocumentID, const ATextIndex inStartPos, const ATextIndex inEndPos );	~CASChar();	  public:	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	SInt32	CountSubModels( DescType inModelID) const;	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;};#pragma mark ===========================#pragma mark [クラス]CASInsertionPoint//AppleScriptハンドル用class CASInsertionPoint : public CASTextDocElement{	//コンストラクタ／デストラクタ  public:	CASInsertionPoint( const LModelObject* inSuper, const ADocumentID inDocumentID, const ATextIndex inStartPos, const ATextIndex inEndPos );	~CASInsertionPoint();	  public:	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;};#pragma mark ===========================#pragma mark [クラス]CASSelectionObject//AppleScriptハンドル用class CASSelectionObject : public CASTextDocElement{	//コンストラクタ／デストラクタ  public:	CASSelectionObject( const LModelObject* inSuper, const ADocumentID inDocumentID, const ATextIndex inStartPos, const ATextIndex inEndPos );	~CASSelectionObject();	  public:	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	SInt32	CountSubModels( DescType inModelID) const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);};#pragma mark ===========================#pragma mark [クラス]CASIndexDoc//AppleScriptハンドル用class CASIndexDoc : public PowerPlant::LModelObject{	//コンストラクタ／デストラクタ  public:	CASIndexDoc( CASApp* inApp, const ADocumentID inDocumentID );	~CASIndexDoc();  private:	ADocumentID					mDocumentID;	  public:	void	HandleAppleEvent( const AppleEvent &inAppleEvent, AppleEvent &outAEReply, AEDesc &outResult, long inAENumber);	LModelObject*	HandleCreateElementEvent( 			DescType			inElemClass,			DescType			inInsertPosition,			LModelObject*		inTargetObject,			const AppleEvent	&inAppleEvent,			AppleEvent			&outAEReply);	SInt32	CountSubModels( DescType inModelID ) const;	void	GetSubModelByName( DescType inModelID, Str255 inName, AEDesc &outToken ) const;	SInt32	GetPositionOfSubModel( DescType	inModelID, const LModelObject *inSubModel) const;	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);	void	InsertItemFromDesc( const AIndex inGroupIndex, const AIndex inItemIndex, const AEDesc &inProps );	void	SetItemFromDesc( const AIndex inGroupIndex, const AIndex inItemIndex, const AEDesc &inProps );	  private:	SInt32	GetDocumentIndex() const;  private:	ATextInfo					mCache_TextInfo;	AFileAcc					mCache_File;	AText						mCache_Text;};#pragma mark ===========================#pragma mark [クラス]CASIndexGroup//AppleScriptハンドル用class CASIndexGroup : public PowerPlant::LModelObject{	//コンストラクタ／デストラクタ  public:	CASIndexGroup( const LModelObject* inSuper, const ADocumentID inDocumentID, const AIndex inGroupIndex );	virtual ~CASIndexGroup();  private:	ADocumentID					mDocumentID;	AIndex						mGroupIndex;	  public:	AIndex						GetGroupIndex() const {return mGroupIndex; }	  public:	void	HandleAppleEvent( const AppleEvent &inAppleEvent, AppleEvent &outAEReply, AEDesc &outResult, long inAENumber);	SInt32	GetPositionOfSubModel( DescType	inModelID, const LModelObject *inSubModel) const;	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	SInt32	CountSubModels( DescType inModelID ) const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);	void	GetSubModelByName(		DescType		inModelID,		Str255			inName,		AEDesc			&outToken) const;	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	void	HandleDelete( AppleEvent &outAEReply, AEDesc &outResult );	LModelObject*	GetInsertionContainer(DescType inInsertPosition) const;};#pragma mark ===========================#pragma mark [クラス]CASIndexRecord//AppleScriptハンドル用class CASIndexRecord : public PowerPlant::LModelObject{	//コンストラクタ／デストラクタ  public:	CASIndexRecord( const LModelObject* inSuper, const ADocumentID inDocumentID, const AIndex inGroupIndex, const AIndex inItemIndex );	virtual ~CASIndexRecord();  private:	ADocumentID					mDocumentID;	AIndex						mGroupIndex;	AIndex						mItemIndex;	  public:	AIndex						GetGroupIndex() const {return mGroupIndex; }	AIndex						GetItemIndex() const {return mItemIndex; }	  public:	void	HandleAppleEvent( const AppleEvent &inAppleEvent, AppleEvent &outAEReply, AEDesc &outResult, long inAENumber);	SInt32	GetPositionOfSubModel( DescType	inModelID, const LModelObject *inSubModel) const;	void	GetAEProperty(			DescType		inProperty,			const AEDesc	&inRequestedType,			AEDesc			&outPropertyDesc)  const;	void	SetAEProperty(			DescType		inProperty,			const AEDesc	&inValue,			AEDesc&			outAEReply);	void	GetSubModelByPosition( DescType inModelID, SInt32 inPosition, AEDesc &outToken ) const;	void	GetSubModelByName(			DescType		inModelID,			Str255			inName,			AEDesc			&outToken) const;	void	HandleDelete( AppleEvent &outAEReply, AEDesc &outResult );	LModelObject*	GetInsertionContainer(DescType inInsertPosition) const;};#endif